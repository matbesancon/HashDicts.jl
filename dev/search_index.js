var documenterSearchIndex = {"docs":
[{"location":"#HashDicts-1","page":"HashDicts","title":"HashDicts","text":"","category":"section"},{"location":"#","page":"HashDicts","title":"HashDicts","text":"Like Base.Dict, but slower. This package defines a single AbstractDict type which relies on key hashnig and equality comparison.","category":"page"},{"location":"#","page":"HashDicts","title":"HashDicts","text":"HashDict","category":"page"},{"location":"#HashDicts.HashDict","page":"HashDicts","title":"HashDicts.HashDict","text":"HashDict{K, V} <: AbstractDict{K, V}\n\nDict-like behavior, stores key-value pairs by key hash.\n\n\n\n\n\n","category":"type"},{"location":"#Resizing-and-managing-capacity-1","page":"HashDicts","title":"Resizing and managing capacity","text":"","category":"section"},{"location":"#","page":"HashDicts","title":"HashDicts","text":"Base.resize!(d::HashDict{K, V}) where {K, V}\nBase.resize!(d::HashDict{K, V}, capacity::Integer) where {K, V}","category":"page"},{"location":"#Base.resize!-Union{Tuple{HashDict{K,V}}, Tuple{V}, Tuple{K}} where V where K","page":"HashDicts","title":"Base.resize!","text":"Base.resize!(d::HashDict)\n\nDouble the size of the data underlying the hash dict. Called when inserting an item goes above LOAD_FACTOR.\n\n\n\n\n\n","category":"method"},{"location":"#Base.resize!-Union{Tuple{V}, Tuple{K}, Tuple{HashDict{K,V},Integer}} where V where K","page":"HashDicts","title":"Base.resize!","text":"Base.resize!(d::HashDict{K, V}, capacity::Integer)\n\nResize a HashDict by adding a given capacity. Becomes a no-op if capacity <= 0.    \n\n\n\n\n\n","category":"method"},{"location":"#","page":"HashDicts","title":"HashDicts","text":"HashDicts.LOAD_FACTOR","category":"page"},{"location":"#HashDicts.LOAD_FACTOR","page":"HashDicts","title":"HashDicts.LOAD_FACTOR","text":"Maximum average number of items per bucket. Resizing is performed when this average is reached.\n\n\n\n\n\n","category":"constant"}]
}
